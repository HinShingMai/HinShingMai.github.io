// paste actions here as an array
var sample = [0.1869988590478897, 0.1502688080072403, 0.07493600249290466, 0.019981205463409424, -0.009217292070388794, -0.021848857402801514, -0.026609301567077637, -0.028438597917556763, -0.0293445885181427, -0.029826730489730835, -0.02984805405139923, -0.029296517372131348, -0.028133586049079895, -0.026406630873680115, -0.024221256375312805, -0.02171345055103302, -0.01902776211500168, -0.016305729746818542, -0.013674236834049225, -0.011243090033531189, -0.00909809023141861, -0.007297936826944351, -0.005873844027519226, -0.004828013479709625, -0.004139740020036697, -0.003763461485505104, -0.0036366786807775497, -0.0036867689341306686, -0.0038328133523464203, -0.0039974600076675415, -0.004108947701752186, -0.004104913212358952, -0.0039416165091097355, -0.0035927388817071915, -0.0030521948356181383, -0.0023326457012444735, -0.001465389272198081, -0.0004953290335834026, 0.0005187569186091423, 0.0015153614804148674, 0.0024290098808705807, 0.003201175481081009, 0.0037804243620485067, 0.004127449356019497, 0.004220768343657255, 0.004057085141539574, 0.0036485139280557632, 0.0030274149030447006, 0.002239419147372246, 0.0013434682041406631, 0.00040444545447826385, -0.0005087666213512421, -0.0013301856815814972, -0.002000449225306511, -0.0024727005511522293, -0.0027146469801664352, -0.0027128709480166435, -0.0024711797013878822, -0.0020128684118390083, -0.0013797981664538383, -0.0006252741441130638, 0.00018235528841614723, 0.0009741252288222313, 0.0016775913536548615, 0.0022252248600125313, 0.0025608912110328674, 0.0026437165215611458, 0.00244804285466671, 0.0019727125763893127, 0.0012353342026472092, 0.0002764556556940079, -0.0008459091186523438, -0.0020589902997016907, -0.003276824951171875, -0.004410168156027794, -0.005371393635869026, -0.0060780225321650505, -0.006462595891207457, -0.006475662812590599, -0.006091252900660038, -0.005307178013026714, -0.004149395041167736, -0.0026689674705266953, -0.0009413547813892365, 0.0009385216981172562, 0.0028605014085769653, 0.004706857725977898, 0.006358116865158081, 0.007703450508415699, 0.008642386645078659, 0.009098054841160774, 0.009016212075948715, 0.008374309167265892, 0.007181437686085701, 0.005479991436004639, 0.0033417604863643646, 0.0008665397763252258, -0.0018238946795463562, -0.004590775817632675, -0.007289251312613487, -0.009773315861821175, -0.011906467378139496, -0.0135686956346035, -0.014663128182291985, -0.015123502351343632, -0.014916148036718369, -0.014043532311916351, -0.012544617056846619, -0.010490383952856064, -0.007984519004821777, -0.005154907703399658, -0.002144627273082733, 0.0008909627795219421, 0.0037962719798088074, 0.00642327219247818, 0.008638322353363037, 0.010330218821763992, 0.011417202651500702, 0.011846765875816345, 0.011601533740758896, 0.010699186474084854, 0.00918862409889698, 0.0071491096168756485, 0.004680969752371311, 0.001905625918880105, -0.0010465787490829825, -0.004042521119117737, -0.006951536517590284, -0.009655446745455265, -0.012049693614244461, -0.014053365215659142, -0.015607703477144241, -0.01667911186814308, -0.017260048538446426, -0.017364755272865295, -0.017028458416461945, -0.016301997005939484, -0.015246942639350891, -0.013931170105934143, -0.012421965599060059, -0.010782584547996521, -0.009068548679351807, -0.007322341203689575, -0.005573704838752747, -0.0038380026817321777, -0.002117350697517395, -0.0004020482301712036, 0.001326441764831543, 0.0030910074710845947, 0.004915222525596619, 0.0068196505308151245, 0.008816942572593689, 0.010908633470535278, 0.01308278739452362, 0.015312403440475464, 0.01755516231060028, 0.019754528999328613, 0.021842271089553833, 0.02374185249209404, 0.025372881442308426, 0.02665620669722557, 0.027519159018993378, 0.027900870889425278, 0.02775697410106659, 0.02706354483962059, 0.02581987902522087, 0.024049900472164154, 0.02180219441652298, 0.019148260354995728, 0.016179323196411133, 0.013001948595046997, 0.009732693433761597, 0.0064912885427474976, 0.0033946484327316284, 0.0005497485399246216, -0.0019523650407791138, -0.004041701555252075, -0.0056733638048172, -0.006830230355262756, -0.007523015141487122, -0.0077905356884002686, -0.0076959580183029175, -0.007323160767555237, -0.006770402193069458, -0.00614495575428009, -0.005554899573326111, -0.005101911723613739, -0.004874199628829956, -0.004941962659358978, -0.005350768566131592, -0.006118200719356537, -0.0072324275970458984, -0.00865308940410614, -0.010312527418136597, -0.012121692299842834, -0.013970106840133667, -0.015739619731903076, -0.017308268696069717, -0.018556542694568634, -0.019379349425435066, -0.01968872919678688, -0.019423112273216248, -0.018549906089901924, -0.017070163041353226, -0.015017028898000717, -0.012457400560379028, -0.009485319256782532, -0.00622180849313736, -0.0028053447604179382, 0.0006161853671073914, 0.00389166921377182, 0.0068742260336875916, 0.00943349301815033, 0.011457785964012146, 0.012862630188465118, 0.013595614582300186, 0.013637948781251907, 0.013005673885345459, 0.011747675016522408, 0.009942842647433281, 0.007696432992815971, 0.005131600424647331, 0.0023837373591959476, -0.00040666665881872177, -0.0031036678701639175, -0.005580955184996128, -0.007729942444711924, -0.009464019909501076, -0.010723115876317024, -0.01147438958287239, -0.011714428663253784, -0.011466164141893387, -0.010776970535516739, -0.009714081883430481, -0.008359052240848541, -0.006802402436733246, -0.005137041211128235, -0.003452874720096588, -0.001830756664276123, -0.00033921003341674805, 0.0009707659482955933, 0.0020646005868911743, 0.002928301692008972, 0.0035642310976982117, 0.003991290926933289, 0.004240028560161591, 0.004350259900093079, 0.004364952445030212, 0.004327096045017242, 0.00427430123090744, 0.004236295819282532, 0.004230726510286331, 0.004262994974851608, 0.0043244510889053345, 0.004394512623548508, 0.0044408030807971954, 0.0044243223965168, 0.0043016597628593445, 0.004030603915452957, 0.003573071211576462, 0.002901410683989525, 0.0020009055733680725, 0.0008727777749300003, -0.0004628412425518036, -0.001967949792742729, -0.0035864412784576416, -0.005246305838227272, -0.006864029914140701, -0.00834871456027031, -0.009607627987861633, -0.010552193969488144, -0.01110418513417244, -0.011201299726963043, -0.010802477598190308, -0.00989145040512085, -0.008479602634906769, -0.00660686194896698, -0.004340708255767822, -0.001773931086063385, 0.000979691743850708, 0.00379084050655365, 0.006521448493003845, 0.009032152593135834, 0.011189930140972137, 0.012875586748123169, 0.013991020619869232, 0.014464527368545532, 0.014255594462156296, 0.013357818126678467, 0.011799201369285583, 0.009640993550419807, 0.00697507057338953, 0.003918813541531563, 0.0006080707535147667, -0.002808578312397003, -0.006180264987051487, -0.009360005147755146, -0.012213869020342827, -0.014627810567617416, -0.016514021903276443, -0.01781430095434189, -0.018504105508327484, -0.018591657280921936, -0.01811746507883072, -0.017150819301605225, -0.01578453928232193, -0.014129191637039185, -0.012304186820983887, -0.010432898998260498, -0.008632123470306396, -0.007005825638771057, -0.005639433860778809, -0.004593595862388611, -0.0039004236459732056, -0.0035651028156280518, -0.0035613924264907837, -0.003837093710899353, -0.004317939281463623, -0.004909947514533997, -0.005509570240974426, -0.006007924675941467, -0.006300732493400574, -0.00629018247127533, -0.0059008002281188965, -0.005072653293609619, -0.0037757158279418945, -0.002006813883781433, 0.00021091103553771973, 0.0028248876333236694, 0.00575864315032959, 0.008916497230529785, 0.012188136577606201, 0.015455543994903564, 0.018598735332489014, 0.021503403782844543, 0.02406705915927887, 0.02620096504688263, 0.027843356132507324, 0.02894677221775055, 0.029498882591724396, 0.02950393408536911, 0.02899298444390297, 0.028013242408633232, 0.026631901040673256, 0.024923134595155716, 0.02296607941389084, 0.02084243670105934, 0.018624506890773773, 0.016382873058319092, 0.01416391134262085, 0.012011907994747162, 0.009947165846824646, 0.007979601621627808, 0.0061026811599731445, 0.004302263259887695, 0.002556711435317993, 0.0008431673049926758, -0.0008632242679595947, -0.0025758296251296997, -0.0043048858642578125, -0.00604228675365448, -0.007770895957946777, -0.009457379579544067, -0.011055007576942444, -0.012506924569606781, -0.013749197125434875, -0.014711998403072357, -0.01533101499080658, -0.01554609090089798, -0.015310171991586685, -0.014594513922929764, -0.01338888704776764, -0.01170809380710125, -0.009593231603503227, -0.007107440382242203, -0.004339937586337328, -0.0013981282245367765, 0.0015956501010805368, 0.00450988719239831, 0.007211190182715654, 0.009570740163326263, 0.011474361643195152, 0.012823665514588356, 0.01354941725730896, 0.0136098712682724, 0.012996800243854523, 0.011738114058971405, 0.00989270955324173, 0.007551446557044983, 0.0048319026827812195, 0.0018730312585830688, -0.00117521733045578, -0.004156418144702911, -0.0069182515144348145, -0.009318739175796509, -0.01123802363872528, -0.012580208480358124, -0.013282626867294312, -0.013315271586179733, -0.01268552616238594, -0.01143716648221016, -0.00964362546801567, -0.007409600540995598, -0.004860385321080685, -0.002134967129677534, 0.0006193742156028748, 0.003258568700402975, 0.005648347083479166, 0.007671131752431393, 0.009234895929694176, 0.010274263098835945, 0.010756127536296844, 0.010680817067623138, 0.010079402476549149, 0.0090109221637249, 0.007561028003692627, 0.00583261251449585, 0.0039406269788742065, 0.002004280686378479, 0.0001397058367729187, -0.0015452057123184204, -0.0029611438512802124, -0.004038229584693909, -0.004731819033622742, -0.0050236135721206665, -0.004921421408653259, -0.004458636045455933, -0.003690183162689209, -0.0026874057948589325, -0.0015347488224506378, -0.00032158195972442627, 0.0008631348609924316, 0.0019372068345546722, 0.0028302520513534546, 0.0034887008368968964, 0.003877989947795868, 0.003984656184911728, 0.003817744553089142, 0.003406152129173279, 0.0027955099940299988, 0.0020455047488212585, 0.0012251585721969604, 0.000406607985496521, -0.00033976882696151733, -0.0009507834911346436, -0.0013742893934249878, -0.001573801040649414, -0.0015307441353797913, -0.0012452974915504456, -0.000736527144908905, -4.0650367736816406e-05, 0.0007915422320365906, 0.0016990229487419128, 0.0026142969727516174, 0.0034692510962486267, 0.004199713468551636, 0.004750169813632965, 0.005077838897705078, 0.005155846476554871, 0.004975065588951111, 0.004544496536254883, 0.0038907304406166077, 0.0030554980039596558, 0.0020926445722579956, 0.0010636597871780396, 3.281980752944946e-05, -0.0009379759430885315, -0.0017942190170288086, -0.002493336796760559, -0.0030088871717453003, -0.003332577645778656, -0.0034761130809783936, -0.0034704580903053284, -0.003364935517311096, -0.0032231807708740234, -0.003119722008705139, -0.0031336024403572083, -0.0033434629440307617, -0.0038200467824935913, -0.004621729254722595, -0.005786977708339691, -0.007332131266593933, -0.009246312081813812, -0.01149146631360054, -0.01400117576122284, -0.016683783382177353, -0.019425729289650917, -0.022096749395132065, -0.024556882679462433, -0.026663638651371002, -0.028279952704906464, -0.029283307492733, -0.029570937156677246, -0.029069267213344574, -0.027736246585845947, -0.02556745707988739, -0.022595301270484924, -0.018890157341957092, -0.01455700397491455, -0.009731143712997437, -0.004571601748466492, 0.0007462203502655029, 0.006039038300514221, 0.011124774813652039, 0.015831604599952698, 0.02000616490840912, 0.023520618677139282, 0.026279106736183167, 0.028221070766448975, 0.029323995113372803, 0.029602810740470886, 0.029108278453350067, 0.027922771871089935, 0.026154953986406326, 0.023931942880153656, 0.02139361947774887, 0.01868252083659172, 0.01593691110610962, 0.01328352466225624, 0.010830443352460861, 0.008663207292556763, 0.00684104859828949, 0.005394347012042999, 0.004327073693275452, 0.0036165639758110046, 0.003218039870262146, 0.003069661557674408, 0.003097712993621826, 0.003222629427909851, 0.0033658593893051147, 0.003455251455307007, 0.0034300237894058228, 0.003245621919631958, 0.0028758421540260315, 0.002314060926437378, 0.0015734955668449402, 0.0006851479411125183, -0.0003049299120903015, -0.0013398751616477966, -0.0023566260933876038, -0.0032910555601119995, -0.004083193838596344, -0.00468192994594574, -0.005049124360084534, -0.005162559449672699, -0.005017958581447601, -0.004629030823707581, -0.0040269941091537476, -0.0032583028078079224, -0.0023809969425201416, -0.0014608576893806458, -0.0005664005875587463, 0.00023642927408218384, 0.0008886381983757019, 0.0013428181409835815, 0.0015671849250793457, 0.001547396183013916, 0.001287892460823059, 0.0008125230669975281, 0.00016193091869354248, -0.000608690083026886, -0.0014339834451675415, -0.002242177724838257, -0.0029618367552757263, -0.0035254284739494324, -0.0038776621222496033, -0.003975637257099152, -0.003795985132455826, -0.0033360421657562256, -0.0026137791574001312, -0.0016694813966751099, -0.0005615726113319397, 0.0006364807486534119, 0.0018401183187961578, 0.002959929406642914, 0.003906697034835815, 0.004599973559379578, 0.004971209913492203, 0.00497165322303772, 0.00457407534122467, 0.003777541220188141, 0.00260721892118454, 0.0011145994067192078, -0.0006250143051147461, -0.0025163665413856506, -0.004449695348739624, -0.006306670606136322, -0.007969789206981659, -0.009325385093688965, -0.010274555534124374, -0.01073998212814331, -0.010668259114027023, -0.010036209598183632, -0.008852766826748848, -0.007160531356930733, -0.0050302715972065926, -0.002563807647675276, 0.00011792685836553574, 0.0028773117810487747, 0.005567620508372784, 0.008044433780014515, 0.01017054170370102, 0.011825185269117355, 0.012913808226585388, 0.01336759701371193, 0.013153951615095139, 0.012275591492652893, 0.010771051049232483, 0.008711710572242737, 0.006201557815074921, 0.0033661946654319763, 0.0003519579768180847, -0.0026876553893089294, -0.005596742033958435, -0.008227474987506866, -0.010445542633533478, -0.012140750885009766, -0.013230644166469574, -0.01366160437464714, -0.013419311493635178, -0.012518595904111862, -0.01100984774529934, -0.008970987051725388, -0.00650419108569622, -0.003729395568370819, -0.0007775570265948772, 0.002217824338003993, 0.005127663724124432, 0.007831765338778496, 0.010227007791399956, 0.012231387197971344, 0.013787081465125084, 0.014860227704048157, 0.015443000942468643, 0.015549793839454651, 0.01521638035774231, 0.014492720365524292, 0.013440459966659546, 0.01212795078754425, 0.010622486472129822, 0.00898684561252594, 0.0072774738073349, 0.005535319447517395, 0.0037915706634521484, 0.0020607858896255493, 0.00034564733505249023, -0.0013639777898788452, -0.003086388111114502, -0.004845365881919861, -0.0066633522510528564, -0.008560553193092346, -0.010550424456596375, -0.01263514906167984, -0.014802612364292145, -0.017023511230945587, -0.019258201122283936, -0.021449826657772064, -0.023528967052698135, -0.025419045239686966, -0.027041302993893623, -0.028315085917711258, -0.029168343171477318, -0.029539600014686584, -0.029386036098003387, -0.028682492673397064, -0.02742840349674225, -0.025646522641181946, -0.023388385772705078, -0.02072235941886902, -0.017741546034812927, -0.014552786946296692, -0.011271387338638306, -0.008017212152481079, -0.004908069968223572, -0.0020498931407928467, 0.00046487152576446533, 0.0025679171085357666, 0.004213184118270874, 0.0053830742835998535, 0.006091222167015076, 0.006372168660163879, 0.006292656064033508, 0.005934521555900574, 0.005396708846092224, 0.004786506295204163, 0.00421181321144104, 0.003774404525756836, 0.0035621970891952515, 0.003646537661552429, 0.004071354866027832, 0.004855111241340637, 0.0059859901666641235, 0.007423609495162964, 0.009100452065467834, 0.010926201939582825, 0.01279209554195404, 0.014579594135284424, 0.016165703535079956, 0.017432190477848053, 0.01827303320169449, 0.018600650131702423, 0.018353618681430817, 0.017499186098575592, 0.01603802666068077, 0.014004029333591461, 0.011463139206171036, 0.008510641753673553, 0.005267034284770489, 0.0018697166815400124, -0.0015320726670324802, -0.004787434823811054, -0.007750358432531357, -0.010289225727319717, -0.012292971834540367, -0.013677399605512619, -0.014390021562576294, -0.014411699026823044, -0.013758495450019836, -0.01247948408126831, -0.010653816163539886, -0.008386068046092987, -0.005799904465675354, -0.003030821681022644, -0.00021876394748687744, 0.002499684691429138, 0.0049986764788627625, 0.007169462740421295, 0.008925475180149078, 0.010206341743469238, 0.010979801416397095, 0.011241912841796875, 0.011015832424163818, 0.010348878800868988, 0.009308259934186935, 0.00797567144036293, 0.006441429257392883, 0.004798591136932373, 0.003136824816465378, 0.0015375595539808273, 6.837211549282074e-05, -0.0012185797095298767, -0.002289874479174614, -0.003130810335278511, -0.0037439558655023575, -0.0041479915380477905, -0.004374049603939056, -0.004461467266082764, -0.004453178495168686, -0.004392433911561966, -0.004316642880439758, -0.004255734384059906, -0.004227232187986374, -0.00423673540353775, -0.004275232553482056, -0.004322275519371033, -0.004345729947090149, -0.004306383430957794, -0.004160739481449127, -0.00386684387922287, -0.003386683762073517, -0.0026922449469566345, -0.0017687976360321045, -0.0006179064512252808, 0.0007404088973999023, 0.0022681355476379395, 0.003908932209014893, 0.00559147447347641, 0.007231816649436951, 0.008739016950130463, 0.010020054876804352, 0.010986816138029099, 0.011561211198568344, 0.011680491268634796, 0.011303706094622612, 0.010414699092507362, 0.009024763479828835, 0.007173821330070496, 0.00492963008582592, 0.0023843832314014435, -0.0003477472346276045, -0.003137495368719101, -0.005846623331308365, -0.00833625067025423, -0.010472712107002735, -0.012137375771999359, -0.013231892138719559, -0.013684660196304321, -0.013455040752887726, -0.012536987662315369, -0.010957591235637665, -0.008779145777225494, -0.006093278527259827, -0.0030166804790496826, 0.00031354278326034546, 0.003749832510948181, 0.007141143083572388, 0.01034073531627655, 0.013213492929935455, 0.015646763145923615, 0.017551448196172714, 0.01887095719575882, 0.019579095765948296, 0.019685067236423492, 0.019229143857955933, 0.018281199038028717, 0.01693224161863327, 0.015294376760721207, 0.013487458229064941, 0.011633239686489105, 0.009849518537521362, 0.008240632712841034, 0.006890900433063507, 0.005861192941665649, 0.005184747278690338, 0.004865683615207672, 0.004878133535385132, 0.005169488489627838, 0.005665391683578491, 0.006273046135902405, 0.006887719035148621, 0.007401227951049805, 0.007708027958869934, 0.007713019847869873, 0.007337167859077454, 0.0065234750509262085, 0.005240306258201599, 0.003484368324279785, 0.0012803077697753906, -0.0013203173875808716, -0.004241272807121277, -0.00738660991191864, -0.010646075010299683, -0.013901382684707642, -0.017032749950885773, -0.01992587000131607, -0.022477492690086365, -0.024601168930530548, -0.026231221854686737, -0.02732548490166664, -0.02786659449338913, -0.027861641719937325, -0.02734033763408661, -0.026351945474743843, -0.024961084127426147, -0.023242779076099396, -0.02127726376056671, -0.019144535064697266, -0.016919538378715515, -0.014668002724647522, -0.01244296133518219, -0.010283127427101135, -0.008211299777030945, -0.006236225366592407, -0.004352852702140808, -0.0025464147329330444, -0.0007949024438858032, 0.000925108790397644, 0.002636149525642395, 0.00435483455657959, 0.006088286638259888, 0.007830634713172913, 0.00956358015537262, 0.011253952980041504, 0.012855574488639832, 0.01431138813495636, 0.015556000173091888, 0.01652243733406067, 0.017144322395324707, 0.017361603677272797, 0.0171278715133667, 0.01641378551721573, 0.015209835022687912, 0.013530626893043518, 0.011415887624025345, 0.00893131922930479, 0.006164335645735264, 0.0032221709843724966, 0.0002287867246195674, -0.002686074236407876, -0.005388714373111725, -0.007749049458652735, -0.009653329849243164, -0.01100493036210537, -0.011732645332813263, -0.011794742196798325, -0.01118491217494011, -0.009928643703460693, -0.008085951209068298, -0.005748413503170013, -0.003032580018043518, -7.720291614532471e-05, 0.002966448664665222, 0.005943462252616882, 0.008700050413608551, 0.011095978319644928, 0.013009674847126007, 0.014346528798341751, 0.015042934566736221, 0.015069190412759781, 0.014433433301746845, 0.013178085908293724, 0.011377562768757343, 0.009136559441685677, 0.006579175591468811, 0.003846384584903717, 0.0010840222239494324, -0.0015638209879398346, -0.003961794078350067, -0.005993988364934921, -0.007566124200820923, -0.008615413680672646, -0.009107080288231373, -0.009041663259267807, -0.008450048044323921, -0.007392061408609152, -0.005953057669103146, -0.0042359717190265656, -0.0023547131568193436, -0.0004297923296689987, 0.0014224890619516373, 0.0030963364988565445, 0.004499582573771477, 0.005564196966588497, 0.006245131604373455, 0.0065238685347139835, 0.006409000605344772, 0.005932555999606848, 0.005150335840880871, 0.0041336482390761375, 0.002967165783047676, 0.0017395969480276108, 0.0005405843257904053, -0.0005488283932209015, -0.00145626999437809, -0.0021302029490470886, -0.002534637227654457, -0.0026571983471512794, -0.0025062356144189835, -0.0021108556538820267, -0.0015154555439949036, -0.0007827514782547951, 2.1265819668769836e-05, 0.0008226907812058926, 0.0015522297471761703, 0.0021461835131049156, 0.0025521591305732727, 0.0027337269857525826, 0.0026731733232736588, 0.002369975671172142, 0.0018428508192300797, 0.0011287871748209, 0.00027758069336414337, -0.0006480012089014053, -0.001582188531756401, -0.002455897629261017, -0.003206199035048485, -0.003775624558329582, -0.004122287034988403, -0.00422029010951519, -0.0040595983155071735, -0.0036483791191130877, -0.003014748450368643, -0.002199774608016014, -0.0012575346045196056, -0.00024868641048669815, 0.0007612518966197968, 0.0017120754346251488, 0.002546954434365034, 0.0032250978983938694, 0.003719672793522477, 0.0040223319083452225, 0.004144498147070408, 0.004117659293115139, 0.00399010069668293, 0.0038271043449640274, 0.0037021711468696594, 0.003694036975502968, 0.00388241745531559, 0.004336513578891754, 0.0051161907613277435, 0.006259601563215256, 0.007782485336065292, 0.009674172848463058, 0.011897377669811249, 0.014384850859642029, 0.017044737935066223, 0.019764140248298645, 0.02241266518831253, 0.024850383400917053, 0.026933953166007996, 0.02852785587310791, 0.029508516192436218, 0.02977365255355835, 0.029248923063278198, 0.027893096208572388, 0.0257013738155365, 0.022706419229507446, 0.018978387117385864, 0.01462244987487793, 0.009773552417755127];

var trainBlocks = [0]; // [0]: normal, [1]: reverse


let cnv;
let currentTrainBlock = 0;
let totalTrainBlocks;
let max_amplitudes = [1/2, 1/4, 1/8, 1/16, 1/32, 1/64, 1/128];
let frequency = [0.1,0.25,0.55,0.85,1.15,1.55,2.05];
let frameNum = 0; // Number of frames in the current session
var timeout;
var dotX;
var dotY;
var dotV = [0.1, 1.00];
var dotA;
var maxX;
var width_x = 24;
var scaling = 1.5;
var scaling_x;
var scaling_y;
var angAcc;
var lines;
var currentSession = 0;
var sessions = 3;
var offset;
var blockType;
var isDraw;
var dis;
var ang;
var act;
var h;
var maxA;
var maxPoints;
var time;
var fps;
var error;
var susE;
var goodjob;
var noiseM;
var subjTrials = {
    fullname: null,
    blocks : []
}
var textDesc = [
    "short testing session of normal control",
    "short testing session of reverse control",
    "training session for practising normal control",
    "training session for practising reverse control",
    "short testing session"
]
function setup() {
    isDraw = false;
    maxA = PI/2;
    //select('#endDiv').hide();
    //select('#instrDiv').hide();
    //cursor_img = loadImage('./cursor1.png');
    //startGame();
}
function trainBlockStart() {
    blockType = trainBlocks[currentTrainBlock];
    offset = blockType;
    currentSession = 0;
    startSession(0);
}
function sessionNext() {
    //subjTrials.blocks.push({session: [currentTrainBlock, currentSession], mod:blockType, dis:dis, ang:ang, act:act, gnd:lines});
    //recordTrialSession(trialcollection, {session: [currentTrainBlock, currentSession], mod:blockType, dis:dis, ang:ang, act:act, gnd:lines})
    document.exitPointerLock();
    currentSession += 1;
    sessionInfo(1);
}
function startSession(type) {
    // Test
    //e = window.event;
    //mouseXOffset = e.clientX;
    //mouseYOffset = e.clientY;
    
    dotX = 0;
    dotY = 0;
    dotA = 0;
    angAcc = 0;
    dotU =0;
    //width_x = 240;
    maxX = width_x*0.625; //15
    isDraw = true;
    select('#container-exp').show()
    //document.getElementById("container-exp").onmousemove = handleMouseMove;
    //document.getElementById("container-exp").requestPointerLock();
    dis = []; 
    ang = [];
    act = [];
    maxPoints = sample.length
    if(blockType < 2)
        lines = sinuousCurve(maxPoints);
    else
        lines = straightLine(maxPoints);
    clear();
    timeout = maxPoints;
    frameNum = 0;
    error = 0.0;
    susE = 0;
    goodjob = 0;
    noiseM = 0.0;
    loop();
}
function sessionInfo(type) {
    noLoop();
    clear();
    isdraw = false;
    let htmlDiv = select('#endDiv');
    let instr = select('#endInstr');
    let plot = select('#plot');
    var mse;
    if(currentSession > 0) {
        mse = avgError(dis, lines);
        console.log("Average error: " + avgError(dis, lines));
        // Define Data
        const idx = Array.from(Array(maxPoints).keys());
        let data = [
          {x: idx, y: lines, mode:"lines", line: {color: 'black', width: 3}, name: "Path"},
          {x: idx, y: dis, mode:"lines", line: {color: 'blue', width: 3}, name: "You"},
        ];
        // Display using Plotly
        Plotly.newPlot("plot", data, {title: "Trajectory"}, {responsive: true});
        plot.show();
    } else
        plot.hide();
    mse = mse.toFixed(3);
    select('#container-exp').hide()
    document.getElementById("container-exp").onmousemove = null;
    let button = document.getElementById("startBt");
    if(type == 0) {
        instr.html(`<br><br>Session ${currentSession}/${sessions} of Block ${currentTrainBlock+1}/${totalTrainBlocks} completed.<br>The next session is a ${textDesc[offset]}.<br>Click the Continue button to proceed.`);
        button.onclick = ()=>{select('#endDiv').hide();startSession(type);};
    } else if(type == 1) {
            instr.html(`<br><br>Mean Square Error: ${mse}<br>Click the Continue button to close canvas.`);
            button.onclick = ()=>{select('#endDiv').hide();endGame();};
    } 
    htmlDiv.show();
    
}
function draw() {
    if(isDraw) {
        clear();
        background('white');
        if(frameNum > timeout) {
            sessionNext();
            return;
        }
        h = min(windowHeight*1/6, 100);
        scaling_x = max(windowWidth, 1200)/60;
        scaling_y = windowHeight/300;
        translate(windowWidth/2, windowHeight*2/3 - dotY*scaling*scaling_y);
        if(frameNum < sample.length)
            angAcc = sample[frameNum];
        else
            angAcc = 0;
        if(offset == 0)
            dotU = fixBetween(angAcc, -maxA, +maxA);
        else
            dotU = fixBetween(-angAcc, -maxA, +maxA);
        //dotA = fixBetween(dotA + dotV[0]*dotU + moveNoise(blockType), -maxA*dotV[0], +maxA*dotV[0]);
        //dotX = fixBetween(dotX + dotA, -maxX, maxX);
        dotA = fixBetween(dotA + dotU + moveNoise(blockType), -maxA, +maxA);
        dotX = fixBetween(dotX + dotA, -maxX, maxX);
        dotY -= dotV[1];
        drawCurve(lines, int(-(dotY+windowHeight/2/scaling/scaling_y)), int(-(dotY-windowHeight/scaling/scaling_y))); //int(max(0, -(dotY+height/2)/4)), int(-(dotY-height)/4))
        heading = dotA;//atan2(dotA, 1);
        //triangle(dotX*scaling*scaling_x, dotY*scaling*scaling_y, dotX*scaling*scaling_x-10*sin(heading)+4*cos(heading), dotY*scaling*scaling_y+10*cos(heading)+4*sin(heading), dotX*scaling*scaling_x-10*sin(heading)-4*cos(heading), dotY*scaling*scaling_y+10*cos(heading)-4*sin(heading));
        if(frameNum < maxPoints) {
            dis.push(dotX);
            ang.push(dotA);
            act.push(angAcc);
            error += pow(dotX - lines[frameNum], 2);
        }
        drawBike();
        //drawControlBar(0, dotY*scaling*scaling_y+windowHeight*1/6);
        /*if(windowWidth > 6*h + 50) {
          drawAngSpeedBar(-2*h-20, dotY*scaling*scaling_y+windowHeight*1/6);
          drawHeadingBar(2*h+20, dotY*scaling*scaling_y+windowHeight*1/6);
        }*/
        drawErrorPanel(windowWidth/2-h-60, dotY*scaling*scaling_y-windowHeight*2/3+60);
        frameNum++;
    }
}
function fixBetween(x, minimum, maximum) {
    if(x < minimum)
        return minimum;
    else if(x > maximum)
        return maximum;
    return x;
}
function sinuousCurve(len) {
    var points = [];
    let start = 0;
    for(let i=0; i<len; i++) {
        var X = 0;
        for(let j=0; j<max_amplitudes.length; j++) {
            X += width_x/2*max_amplitudes[j]*sin(2*PI*start*frequency[j]);
        }
        //points.push({x: X, y: i});
        points.push(X);
        start += 0.02; // 0.02
    }
    return points;
}
function straightLine(len) {
    var points = [];
    let start = 0;
    for(let i=0; i<len; i++) {
        points.push(0.0);
    }
    return points;
}
function drawCurve(coords, start, end) {
    noFill();
    stroke('black');
    strokeWeight(6);
    let startFix = start;
    if(startFix < 0)
        startFix = 0;
    let endFix = end;
    if(endFix > coords.length)
        endFix = coords.length;
    for(let i = startFix+1; i<endFix; i++)
        line(coords[i-1]*scaling*scaling_x, -(i-1)*scaling*scaling_y, coords[i]*scaling*scaling_x, -i*scaling*scaling_y);
        //line(coords[i-1].x*scaling*scaling_x, -coords[i-1].y*scaling*scaling_y, coords[i].x*scaling*scaling_x, -coords[i].y*scaling*scaling_y);
}
function drawHeadingBar(x, y) {
    fill('white');
    stroke('black');
    strokeWeight(2);
    rect(x-h, y-h/2, 2*h, h);
    noFill();
    stroke('black');
    line(x-h/2, y+h/10, x+h/2, y+h/10);
    line(x-h/2, y-h/10, x-h/2, y+h/10);
    line(x+h/2, y-h/10, x+h/2, y+h/10);
    line(x, y-3*h/20, x, y+3*h/20);
    stroke('blue');
    fill('blue');
    ellipse(x+dotA/maxA*h/2, y, 3*h/20, 3*h/20);
}
function drawAngSpeedBar(x, y) {
    fill('white');
    stroke('black');
    strokeWeight(2);
    rect(x-h, y-h/2, 2*h, h);
    noFill();
    stroke('black');
    line(x-h/2, y, x+h/2, y);
    line(x-h/2, y-h/10, x-h/2, y+h/10);
    line(x+h/2, y-h/10, x+h/2, y+h/10);
    line(x, y-3*h/20, x, y+3*h/20);
    stroke('blue');
    fill('blue');
    rect(x, y-h/20, fixBetween(dotU/maxA*8*h/2, -h/2, h/2), h/10);
}
function drawErrorPanel(x, y) {
    if(frameNum%10 == 0)
        fps = int(getFrameRate());
    fill('white');
    stroke('black');
    strokeWeight(2);
    rect(x-h, y-h/2, 2*h, h);
    noFill();
    textSize(h*3/20);
    strokeWeight(1);
    let avgE = error/min(frameNum+1, maxPoints);
    text("FPS: " + fps, x-h*3/4, y-h/4);
    text("Avg Error: " + avgE.toFixed(2), x-h*3/4, y);
    if(frameNum < maxPoints) {
        let curE = pow(dotX - lines[frameNum], 2);
        if(curE < avgE*0.8) {
            fill('green');
            susE += 1;
        }
        else if(curE > avgE*1.2) {
            fill('red');
            susE -= 1;
        }
        susE = fixBetween(susE, 0, 120);
        text("Error: " + curE.toFixed(2), x-h*3/4, y+h/4)
        if(goodjob > 0) {
            text("Error: " + curE.toFixed(2), dotX*scaling*scaling_x + 60, dotY*scaling*scaling_y);
            if(susE < 60) {
                goodjob = 0;
                susE = 0;
            }
        }
        else {
            text("Error: " + curE.toFixed(2), dotX*scaling*scaling_x + 60, dotY*scaling*scaling_y);
            if(susE > 60) {
                goodjob = 1;
                susE = 120;
            }
        }
    }
}
function randomInRange(min, max) {
  return Math.random() * (max - min) + min;
}
function drawControlBar(x, y) {
    let ang = angAcc * 5;
    fill('white');
    //stroke('blue');
    strokeWeight(2);
    rect(x-h, y-h/2, 2*h, h);
    noFill();
    stroke('black');
    line(x-h/2*cos(ang), y-h/2*sin(ang), x+h/2*cos(ang), y+h/2*sin(ang));
    strokeWeight(6);
    line(x-h/2*cos(ang), y-h/2*sin(ang), x-0.3*h*cos(ang), y-0.3*h*sin(ang));
    line(x+0.3*h*cos(ang), y+0.3*h*sin(ang), x+h/2*cos(ang), y+h/2*sin(ang));
    stroke('black');
    fill('black');
    ellipse(x, y, h/25, h/25);
  
    image(cursor_img, x+0.4*h*cos(ang)-16, y+0.4*h*sin(ang)-16, 32, 32);
}
function drawBike() {
    if(offset == 0) {
        stroke('blue');
        fill('blue');
    } else {
        stroke('red');
        fill('red');
    }
    strokeWeight(2);
    let heading = dotA/0.3;
    let x = dotX*scaling*scaling_x;
    let y = dotY*scaling*scaling_y;
    line(x, y, x-40*sin(heading), y+40*cos(heading));
    triangle(x, y, x-10*sin(heading)+4*cos(heading), y+10*cos(heading)+4*sin(heading), x-10*sin(heading)-4*cos(heading), y+10*cos(heading)-4*sin(heading));
}
function handleClick() {
    startSession();
}
function moveNoise(mode) {
    /*// Standard Normal variate using Box-Muller transform.
    const mean = 0;
    const std = 0.5;
    const u = 1 - Math.random(); // Converting [0,1) to (0,1]
    const v = Math.random();
    const z = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );
    // Transform to the desired mean and standard deviation:
    noiseM = z * std + mean;
    return noiseM*0.1;*/
    /*if(mode < 2)
        //return 0;
    //else 
    if(true) {
        if(frameNum %1 == 0) {
            // Standard Normal variate using Box-Muller transform.
            const mean = 0;
            const std = 0.5;
            const u = 1 - Math.random(); // Converting [0,1) to (0,1]
            const v = Math.random();
            const z = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );
            // Transform to the desired mean and standard deviation:
            noiseM = z * std + mean;
            return noiseM*0.1;
        } else {
            return noiseM*0.1;
        }
        // Standard Normal variate using Box-Muller transform. mod1
            const mean = 0;
            const std = 0.1;
            const u = 1 - Math.random(); // Converting [0,1) to (0,1]
            const v = Math.random();
            const z = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );
            // Transform to the desired mean and standard deviation:
            noise = z * std + mean;
            return noise;
    }*/
    return 0;
}
function avgError(arr1, arr2) {
    // mean square error
    let maxlen = min(arr1.length, arr2.length);
    if(maxlen == 0)
        return 0.0;
    let avg = 0.0;
    for(let i=0; i<maxlen; i++)
        avg += pow(arr1[i]-arr2[i], 2);
    return avg/maxlen;
}

function startGame() {
    cnv = createCanvas(windowWidth, windowHeight);
    cnv.parent("container-exp");
    document.body.style.overflow = 'hidden';
    fullscreen(true);
    select('#instrDiv').hide();
    totalTrainBlocks = trainBlocks.length;
    /*fetch('./data.json').then((res) => {
        if (!res.ok) {throw new Error (`HTTP error! Status: ${res.status}`);}
        return res.json();
        }).then((data) => {sample=data; console.log(data); trainBlockStart();}).catch((error) => console.error("Unable to fetch trajectory data:", error));*/
    
    trainBlockStart();
}
// Function that ends the game appropriately after the experiment has been completed
function endGame() {
    fullscreen(false);
    select('#container-exp').hide();
    remove();
    document.getElementById("container-exp").onmousemove = null;
    document.body.style.overflow = 'auto';
}